/* 
Nota:
Os seguintes valores de teste cont√©m:
- Headers v√°lidos
- 1 exemplo de registro com todos os valores corretos
- 1 exemplo de registro com 2 autores (separados por v√≠rgula)
- 1 exemplo de registro sem o campo `indexadoresnorma`

E devem ser o suficiente para testar todos os cen√°rios poss√≠veis de registros no CSV fornecido. :)

*/

import { readFile } from 'fs/promises';
import { join, dirname } from 'path';
import { fileURLToPath } from 'url';

const __filename = fileURLToPath(import.meta.url);
const __dirname = dirname(__filename);
const csvDir = join(__dirname, './projeto-de-leimin.csv');

const dataBuffer = await readFile(csvDir);
const data = dataBuffer.toString();

export default data;

/* 
Nota extra + Dica do Wells: O CSV original tem mais "desafios" (leia-se "dificuldades de implementa√ß√£o por m√° formata√ß√£o do CSV") que foram 
abstra√≠dos na confec√ß√£o desse desafio principal (leia-se "salvei voc√™s de lidar com isso, denada üòÇ"), 
j√° que o foco desse desafio √© usar express√µes regulares, e n√£o enlouquecer se perguntando "por que raios nenhum CSV com dados p√∫blicos 
vem sequer com o Charset configurado direito?" (n√£o leia-se "Wells fala com propriedade sobre essa parte pq j√° trabalhou com isso")

Maaaaas, se por ventura, voc√™ quiser se aventurar em mais casos que podem ser tratados como exemplo aqui, e quiser 
_pegar o CSV original_ no link mencionado no README do desafio, baixar e tratar os erros poss√≠veis que vem dele, aqui v√£o algumas dicas:
- Charset incorreto que precisa ser convertido
- Quebra de linha em lugares errados
- Excesso de `;` e `\n`
- Despadroniza√ß√£o de urls
*/
